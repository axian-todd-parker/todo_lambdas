AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Parameters:
  BucketName:
    Type: String
  CodeKey:
    Type: String
Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: 2.0
        info:
          version: 1.0
          title: todo-lambdas
        basePath: /Prod
        schemes:
          - https
        paths:
          /items:
            get:
              responses:
                "200":
                  description: 200 response
              security:
                - todo_auth_pool: []
              x-amazon-apigateway-integration:
                type: aws
                responses:
                  default:
                    statusCode: 200
                httpMethod: GET
            put:
              responses: 
                "200":
                  description: 200 response
              security:
                - todo_auth_pool: []
              x-amazon-apigateway-integration:
                type: aws
                responses:
                  default:
                    statusCode: 200
                httpMethod: PUT
          /items/{uid}:
            delete:
              responses: 
                "200":
                  description: 200 response
              security:
                - todo_auth_pool: []
              x-amazon-apigateway-integration:
                type: aws
                responses:
                  default:
                    statusCode: 200
                httpMethod: DELETE
        securityDefinitions:
          todo_auth_pool:
            type: apiKey
            name: Authorization
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - arn:aws:cognito-idp:us-west-2:266882346412:userpool/us-west-2_7HKgm1tIC
  VersionGetFunction:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref GetFunction
  GetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.getItems
      Runtime: nodejs6.10
      Timeout: 10
      MemorySize: 128
      CodeUri:
        Bucket: !Ref BucketName
        Key: !Ref CodeKey
      Policies: AmazonDynamoDBReadOnlyAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref item
      Events:
        GetItems:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /items
            Method: get
  VersionSaveFunction:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref SaveFunction
  SaveFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.saveItem
      Runtime: nodejs6.10
      Policies: AmazonDynamoDBFullAccess
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: !Ref item
      CodeUri:
        Bucket: !Ref BucketName
        Key: !Ref CodeKey
      Events:
        PutItems:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /items
            Method: put
  VersionDeleteFunction:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref DeleteFunction
  DeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.deleteItem
      Runtime: nodejs6.10
      Policies: AmazonDynamoDBFullAccess
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: !Ref item
      CodeUri:
        Bucket: !Ref BucketName
        Key: !Ref CodeKey
      Events:
        DeleteItems:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /items/{uid}
            Method: delete
  item:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: uid
        Type: String
      ProvisionedThroughput:
         ReadCapacityUnits: 1
         WriteCapacityUnits: 1
